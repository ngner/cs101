# A procedure, cellular_automaton, that takes three inputs: 
#     a non-empty string, 
#     a pattern number which is an integer between 0 and 255 that
# represents a set of rules, and 
#     a positive integer, n, which is the number of generations. 
# The procedure should return a string which is the result of
# applying the rules generated by the pattern to the string n times.

def cellular_automaton(string, pattern_number, iterations):
    pattern_dict = create_pattern_dict(pattern_number)
    for i in range(iterations):
        new_string = ""
        for k in range(len(string)):
            new_string = new_string + new_k(k, string, pattern_dict)
        string = new_string
    return new_string
        
    

def new_k(k, string, pattern_dict):
    post_k = k +1
    if k == len(string) -1:
        post_k = 0
    sub_string= string[k-1] + string[k] + string[post_k]
    for pattern in pattern_dict:
        if pattern == sub_string:
            return pattern_dict[pattern]
    return "Error in pattern match"

def create_pattern_dict(pattern_number):
    pattern_list = ['xxx', 'xx.', 'x.x', 'x..', '.xx', '.x.', '..x', '...']
    bin_number = bin(pattern_number)[2:].zfill(8)
    bin_pattern = bin_number.replace('0','.').replace('1','x')
    return dict(zip(pattern_list, bin_pattern))


